API 
faz o meio campo entre o banco de dados e aplicações externas como web, android IOS, api, no qual traz esses dados do bando de dados e os retorna em formato json onde qualquer tipo de aplicações externa consegui consumir esses dados exitem api filtradas com autenticaçoes, 
=========================================================================
Arquitetura
https://dominio.com.br/api/recurso

https://dominio.com.br/api/products repare que o recurso que esta sendo trabalhado aqui que é o products está no plural e deve ficar assim
#ou
https://IP/api/products
=========================================================================
Response:
Forma de retorno.
JSON ou XML
=========================================================================
Verbos HTTP
GET
Obtem um recurso, retorna todos os produtos, os registros
POST
Inseri algo no bando
PUT/PATH
atualiza/edita os dados
DELETE
apaga
OPTIONS
==========================================================================
Status code
retorna status
Estatos de 200 ou 204 retona sucesso
300 redireciona
400 cliente error página q não existe
500 problema no servidor
200 0k, sucesso
201 recurso com sucesso
204 quando deleta um registro
304 não foi modificado o item (not midified)
 
Erros
400 Bad Request requizição não foi processada

401 Unauthorized não autorizado, só usuário autorizado com token ou senha, mostra também que aquele status já foi expirado

403 Forbidden quando tem vários recursos e só tem autorização para certo recurso
404 Not Found não encontrado, essa rota não existe
410 gone não é tão comun, recurso não existe mais, 

500 internal server erro retorna um erro do servidor não esperado
503 service unavailabel, coloca app em manutenção e ele fica nesse estado
=============================================================================
Versionamento
https://dominio.com.br/api/v1/products 
usa-se o versionamento para melhoras sem dispensar as versões antigas para que usuários antigos não fiquem na mão
==============================================================================
cors(cross-origin resource sharing)
Controlar permissões de requisição
(headers)
é um recuso de serugança implementado pelos navegadores, que permite a comunicação entre diferentes servidores e diferentes domínios.
este mecanismo tenta permitir as requisições feitas por vc entre os servidores, e ao mesmo tempo tenta impedir que resuisições feitas por scripts maliciosos sejam executadas sempre q é executada uma equisiçõa http para um domínio, subdomínio, porta ou protocolo.
===============================================================================
Tratamento de erros de forma amigável
===============================================================================
Middlewares
Total de requisição/tempo
E´importante para defeza de robôs
================================================================================

Aula 02 Ferramentas para o curso de

Aula 04 comando cria model -m migration e -mc migration e controller php artisan make:model Category -m 
na migration o laravel pede para especificar em cada item a quantidade de caracter, podemos deixar padrão, para isso vamos em Providers/AppSerivePrividers.php e na função boot() modificamos colocando: Schema::defaultStringLength(191) use Illuminate\Suport\Facades\Schema;

Aula 5 faço o controller é boa prática que controlle de api fique em uma pasta Controller/Api
rotas da api não podem ficar no arquivo web.php pq são rotas do site na routes/api pode ser feito filtragens e etc...
Como faço para acessar rotas q estão dentro de route/api? temos um prefixo api acessamos o domínio/api(que é a rota no route/api)/categories
levo o name para model Category.php

Aula 7 cadastrar categoria inseri dados no banco
no postman inserir http://cursolaravelapi.test/api/categories?name=jujuba
Aula 8 editar categoria
Aula 9 validação, formquest isolando a regra de validação, crio o request:
php artisan make:request <nome>
Quando a requisição é do tipo ajax o postman não reconheci, mas para uso da api, aqui vamos simular q é em vue.
Colocamos no postman: Headers
key: 								value:
	Contenty							 application
	 X-Requested-With					 XMLHttpRequest

Aula 10 validar edição	vamos no controller
no postman para editar http://cursolaravelapi.test/api/categories/6?name=jubujanra
Aula 11 deletar criar a lógica em controller
no postman para deletar http://cursolaravelapi.test/api/categories/9

Aula 12 implementar rotas simplificadas routes/api
usando get para ver a listagem no postaman http://cursolaravelapi.test/api/categories

Aula 13 visualizar detalhes
Vamos ao controller

Aula 14 visualizar model e tabaela de produtos API laravel
parte da gestão dos produtos 
1 para muitos, uma categoria vários produtos e 1 produto uma única categoria
crearemos a model Product -m de migration

Aula 15 factory produtos api laravel 
O fake é para inserir no banco dados falsos para trabalharmos com uma massa de dados q é util e vários cenários 
Criando seeder: php artisan make:seeder UsersTableSeeder
rodar a seed: php artisan db:seed
criando o factory: php artisan make:factory ProductFactory  temos q seguir essa nomeclatura do nome
e rodo o db:seed especificando qual seed qero rodar para não dar erro:
php artisan db:seed --class=ProductsTableSeeder
******para corrigir o erro: php artisan db:seed --class=DatabaseSeeder

Aula 16 definir relacionamento entre tabelas
criar nova coluna de 1 para muitos, a chave estrangeira sempre fica na tabela mais fraca que seria produto, logo pq uma categoria pode ter diversos produtos e um produto esta relacionado a uma única categoria nesse cenário a tabela mais fraca é produto. Vamos na tabela produto para redefinir

Aula 17 listar produtos
vamos criar na Api um ProductContronller e rota na api

Aula 18 paginar produtos api, vou no controller no index e substituo o get por paginate

Aula 19 filtro api 
no postiman uso /products?name=<o nome q qero pesquisar>
no postman para filtrar uso essa url com a palavra filter:http://cursolaravelapi.test/api/products?filter=<a palarava procurado com abreviatura>

Aula 20 cadastrar produtos api fazer um cadastro de produtos vamos no ProductController delegar responsabilidades

Aula 21 Editar produtos api laravel
vamos ao ProductController no método update ele é do tipo put
no postman:http://cursolaravelapi.test/api/products/52?name=dolores

Aula 22 Validações de produtos se o funcionamento do crud estiver bem então é hora de tratar com validações.
Vamos centralizar tudo na mesma classe no request
No postman mudo para post e mudo para Headers q tem as config. de Content-Type e X-Requested onde eu estou simulando q essa requisição esta sendo via ajax para que nossa requisição requeste seja do tipo json

Aula 23 Deletar produto
no postman passo apenas o id q qero deletar product/id

Aula 24 retornar poduto pelo id
No controller usando o método show
no postman passo apenas o id q qero mostrar product/id

Aula 25 configuração API laravel upload de arquivos
Precisos ir no config/filesystem 
'default' => env('FILESYSTEM_DRIVER', 'local'), 
vamos usar a pq ela armazena em app/public que segnifica q posso deixar os arquivos publicos, por exemplo se quiser listar essas imagens para deixa-las publicas, então mudamos de local para public 'default' => env('FILESYSTEM_DRIVER', 'public'), 
'public' => [
],
criamos na pasta storage/app/public links simbólicos para ter acesso as imagens
usamos o comando: php artisan storage:link
usando o comando ls -l public/ verificamos q temos já configurado

Aula 26 upload de arquivos api laravel
Vamos para o productController modificar o store método
no postiman vou em body escolho 

Aula 27 alterar imagem editar produto api laravel
Vamos ao controller no método update
no postaman uso http://cursolaravelapi.test/api/products/2 com o id que quero indicar que quero usar para alterar
nos item de edição coloco com 
O método que uso é o post
key:    _method
value:  PUT

Aula 28 deletar imagem ao deletar produto
ProductController:

04===========================

Aula 29 Relacionamento Listar produtos por categoria
Vamos na Model/Category
Faremos o relacionamento vai retorna todos os produtos realcionados a categoria em um realcionamento de um pra muitos já que uma categoria pode ter vários produtos relacionados a ela e um produto tem apenas uma categoria.
No postman: http://cursolaravelapi.test/api/categories/1/products o id da categoria q quero retornar e products é o recurso

Aula 30 realcionamentos listar produtos e categoria fazendo o passo inverso
ProductController.php no metodo show

Aula 31 versionamento de apis
Uns dos benefícios de trabalhar com api é o versionamento, como mudar algumas regras, criar novas melhorias e etc.
Quando qero criar um upgrade deixo as versões antigas em routes/api

Aula 32 alguns detalhes sobre configuração de api
Vou em providers/RouteServiceProvide.php lá tem os padrões de rota posso mudar o namespace, diretório default

No mapApiRoutes() temos as configurações padrão que não é recomendado pois se mexer me em coisas globais

Aula 33 limitar total requisições api
trabalhando com api uma das coisas interessantes são os filtros
app/http/Kenel.php : em 'api' => [

							'throttle:60,1', aqui representa a quantidade máxima de requisições que um mesmo cliente pode fazer em determinado tempo e o 1 é o tempo de bloqueio, por exemplo se eu for no postman e apertar o send 60 vezes em menos de um minuto serei bloqueado por 1 minuto.
							'bindings',
						]

Aula 34 tratamento de exceções api
Como podemos tratar o erro por exemplo o 404 vamos retornar uma erro mais amigável para isso vamos em app/exception/handler.php e em function render...

Aula 35 tratamento de exceções requisições ajax
Posso tratar erros ela sendo do tipo ajax, se der um 404 posso deixar mais amigável no caso se for ajax
vou em app/exceptions na função render...

Aula 36 tratamento de erros 
Se quando coloco na url um verbo que não corresponde ao requisito pedido nela por exemplo uma pesquisa por id e uso o método post me retorna um erro 
message: "", 
"exception": "Symfony\Component\\HttpKernel"
vou em: app/exceptions na função render...

Aula 37 tratamento de cors api laravel
Autorizar ou não requisições externas, por exemplo quais tipos de verbos http a aplicaçõa vai receber, quais servidores de origem vai poder receber requisições, posso liberar requisições apenas para um determinado client
Trabalha com segurança desses recursos q através desse pacote podemos controlar.

Crio um novo arquivo e 
teste.html
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>
vmaos para instalação do 

Quando se dá o erro de cors deve ser corrigido para a página consumir aplicações externas, vamos baixar no github: (https//github.com/spatie/laravel-cors#laravel) um pacote por linha de comando:
composer require spatie/laravel-cors

Em seguida ire em app/http/Kernel em 
			protected $middlewareGroups = [
				'api' => [
					\Spatie\Cors\Cors::class,
				],
			];

Podemos configurar mais ainda para escolher qual verbo aceitar por exemplo
Usando o comando em linha:
php artisan vendor:publish --provider="Spatie\Cors\CorsServiceProvider" --tag="config" que é gerado dentro de config/cors


Aula 38 tradução de apis
Pacote de tradução para as mensagens
Link github: hpps://github.com/caouecs/laravel-lang
em src tem várias pastas uma pt-br q traduz, podemos clonar copiando a url
na linha de comando rodo: git clone https://github.com/caouecs/laravel-lang.git
com comando ls podemos ver 
copio da poasta laravel-lang/rsc/pt-br para a pasta resource/lang e colo essa pasta e posso deletar o repositório q clonei inteiro agora vou para config/app e mudo em locate = 'pt-BR' e também fallback_locale

==========================================================================

Curso JWT

Aula 1 conceito
Trata de autorização de acessos, liberar recursos privados através de tokens
O cliente faz autenticação
jwt faz a veriricação e devolve o token, jwt faz a intermediação entre cliente e serve

Aula 2 instalando configurando
Nessa página teve atualizações:
GitHub: https://github.com/tymondesigns/jwt-auth

Jwt Documentação: http://jwt-auth.readthedocs.io/en/develop/

Uso o comando para a versão que está sendo usada nesse projeto acrescentando (:dev-develop --prefer-source):
composer require tymon/jwt-auth:dev-develop --prefer-source

depois de instalado vamos em: config/app em providers e colamos:
Tymon\JWTAuth\Providers\LaravelServiceProvider::class,

depois alises:
'JWTAuth' => Tymon\JWTAuth\Facades\JTWAuth::class,

depois mudar as configurações instalando:
php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
será gerado esse aquivo e a configuração não será modificada mas vamos mudar o 'ttl' => env... que é o tempo de vida útil do nosso token
temos o 'refresh_ttl' => env... que podemos modificar pois o valor que lá está tem duração de 2 semanas para a duração de token

Precisamos cria uma chave secreta criada pelo jwt
Vamos rodar:
php artisan jwt:secret


Aula 03 autenticação jwt
Vamos gerar o token 
Primeiro passo vamos criar nossa chave de autenticação, vamos em wiki em:
https://github.com/tymondesigns/jwt-auth/wiki e vamos na parte de creating tokens e copiamos o laravel 5 mas antes criaremos nosso controller de depois nossa rota

Após a autenticação gerou um token no postman que podemos usá-lo armazenando-o em uma variável

Aula 4 Recuperar o usuário
Vamos no AuthApiController no método authenticate()...

Aula 5 Atualizar token jwt
Ele tem o tempo de vida util de 60 min e depois pede para que seja feito o login ou de forma oculta é pedido para o serve que seja feito esse login
Vamos em config/jwt.php 
Em ttl: tem o parêmetro de 60 min e em
'refresh_ttl' => env('JWT_REFRESH_TTL', 20160), que são 14 dias para expirar novamente então é pedido o login vamos a rota

Aula 6 limitar recuros com jwt
vamos em:
https://github.com/tymondesigns/jwt-auth/wiki/Authentication
e lá embaixo é passado quais header devo aplicar

protected $routeMiddleware = [
	...
	'jwt.auth' => 'Tymon\JWTAuth\Middleware\GetUserFromToken',
	'jwt.refresh' => 'Tymon\JWTAuth\Middleware\RefreshToken',
];
vou em kernel e em routeMiddleare eu registro os headers

'jwt.auth' => 'Tymon\JWTAuth\Middleware\GetUserFromToken',
'jwt.refresh' => 'Tymon\JWTAuth\Middleware\RefreshToken',

Aula 7 tratamento de exceções jwt 
Temos q tratar o erro com mensagens mais amigáveis vamos em exception ou em:
Tratamento de exceções JWT: https://github.com/tymondesigns/jwt-auth/wiki/Authentication#global-exception-handling no laravel 5
Vamos em app/exceptions/handler.php e colo o código:


=======================================================================
INTRODUÇÃO AO Lavael com vue

Aula 2 dowload node
instalar o pacote json: 
npm install

Aula 3 intalando o vuerouter(para rotas) e vuex (para estados):
npm install --save-dev vue-router vuex

Aula 4 configuração laravel-mix nós conseguimos abstrair nossa camada de frontend
Vammos abrir o webpack.mix.js

Aula 5 entendendo os resources js do laravel
inclui o arquivo bootstrap -> require(./bootstrap); que não tem nada a ver com o framework boostrap esse é js, nele posso apar window.popper = require('popper.js') vamos nesse aquivo depois faz a instância do vue.js em app.js

Aula 6 Trabalhando dom vue js no laravel
Continuando com a parte de configuração, tendo um projeto grande de laravel eu posso incluir o vue.je vamos em welcome.blade.php

Aula 7 configurando o vuerouter
Em assest/js crio routes para rotas vue.js

Aula 8 config o vuex 
Crio pasta vuex/store.js

Aula 9 config o browser sync que atualiza automaticamente, vou no webpackt

----------------------------------------------------------------
02 ADIM/CATEGORIAS

Aula 01 organizando Admin Laravel com vue js vai tratar da parte de gestão do projeto, vamos em components/frontend, admin e layouts:

*admin: componentes referentes a administração

*frontend: parte visível para o site

*layouts:parte compatível aos dois como uma paginação

passo apagar o testecomponent.vue que era:
<template>
	<!--component pode fazer qualquer coisa, buscar dados no bando, buscar infomações em uma api e etc...-->
	<div>
		<h1>Sou um component vue js =D WENDEL WENDEL</h1>
	</div>
</template>
<script">export default {}</script>
<style scoped></style>
vou também em app.js apagar pra não dar erro

Em admin/layouts coloco coisas referentes ao admin como layouts e etc
Em admin/pages fica as páginas da nossa admin, categorias etc...

Aula 2 organizando rotas admin categorias cuidar da rota barra:
components/admin/pages/dashboard/DashboardComponent.vue

O AdminComponent.vue cuidara da parte de rotas será nosso template da parte de admin, as nossas rotas de admin estarão no nosso prefixo admin
path: '/admin', serão filhas(children) da '/admin'

Aula 3 listar categorias
Vamos em AdminComponent para adicionar um menu

Aula 4 listar categorias com vuex pq? Se por exemplo quiser mostra a quantidade de categorias no próprio categories no próprio menu... até posso fazer por causa da relação entre o nosso componente filho categorias e o dashboard q é o nosso adminComponent pois os dois são relacionados pai e filho mas se preciso mostrar informações de outra categoria de outro component, eu não tenho relação entre esses dois components então teria q passa a informação para o pai e o pai passaria para o filho e seria a maior gambiarra porque eu estaria passando os dados de um component para o outro e esses dados paderiam se perder nesse caminho sem falar na dificuldade de manuntenção e o vuex torna produtivo armazanado esses dados no vuex e quando precisasse do memso eu buscaria no vuex então vamos na vossa configuração no vuex na pasta resource/assets/js/vuex..categories.js

Aual 5 criar componente de preloader vou em js/components/layouts

Aual 6 preloader ao carregar categorias
Vamos e action q carrega nossas categorias

Aula 7 pré-organizar layout admin melhorias
Vamos ao arquivo de view

Aula 8 Component de cadastro de categoria
Vou em categorieComp e insriro o botão de cadastra

Aula 9 cadastrar nova categoria 
Vamos component add categoria

Aula 10 component de editar categoria
Vamos em component categories para cria o editor

Aula 11 component de formulário de categoria vamos centralizar as responsabilidades não pecisando repetir o cadastro tendo assim repetição de código
para isso crio uma pasta chamada partials e coloco todo que posso reutilizar.

Aula 12 cadastar e editar category

Aula 13 instalar e configurar  o vue-snotify, import no app.js e insiro no blade
vou em assets/sass/app.scss pode escolher outros estilos além do matiral, em node_modules/vue-snotify/style como dark, simple e etc...

Aula 16 Deletar Categoria
Vamos em catecorieComponent

Aula 17 Confirmar deletar categoia 

Aula 18 filtro de categorias

=======================================================================
 03 admin/Categorias
======================================================================
Aula 01 preparar compoents vuex
em pages no admin
criamos ProductsComponents

Aula 02 carregar produtos 

Aula 03 lista produtos

Aula 04 paginação simples

Aula 05 paginação com component, mais completa

Aula 06 filtrar produtos

Aula 07 intalar e configurar o vodal
Baixar tipos de vodal: https://github.com/chenjiahan/vodal 
Demo: https://chenjiahan.github.io/vodal/
Para instalar:
npm install --save-dev vodal

Vou em resource/sass/app.scss
e importo e incluio o (~)

// include animation styles
@import "~vodal/common.css";
@import "~vodal/rotate.css";

Depois disso já posso usar e para isso importo e uso desta forma

<vodal :show="show" animation="rotate" @hide="show = false">
    <div>A vue modal with animations.</div>
</vodal>
import Vue from 'vue';
import Vodal from 'vodal';

Vue.component(Vodal.name, Vodal);

export default {
  name: 'app',
    
  data() {
    return {
      show: false
    }
  }
}

Aula 08 modal de cadastro de produto 

Aula 09 cadastro de produto modal

Aula 10 fechar modal e listar produtos 

Aula 11 resetar formulário de erros 

Aula 12 carregar categorias automaticamente

Aula 13 preparar edição de produto



